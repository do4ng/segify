export default "// packages/segify/src/client/lib.ts\nvar $$cc = (t, a, c = [], $$DEV_PROPS = {}) => {\n  a.children = [].concat(...c);\n  for (const key in a) {\n    if (Array.isArray(a[key]) && a[key].length === 2 && Array.isArray(a[key][0]) && typeof a[key][1] === \"string\") {\n      let [data, original] = a[key];\n      for (const att of data) {\n        original = original.replace(att, $$DEV_PROPS[att]());\n      }\n      a[key] = original;\n    }\n  }\n  const component = new t(a);\n  const cs = component.$$components();\n  component.$$stylesheet();\n  component.$$event();\n  return cs;\n};\nvar $$ce = (t, a, c = [], $$DEV_PROPS = {}) => {\n  if (typeof t !== \"string\") return $$cc(t, a, c, $$DEV_PROPS);\n  const component = document.createElement(t);\n  for (const key in a) {\n    if (Array.isArray(a[key])) {\n      let [data, original] = a[key];\n      for (const att of data) {\n        original = original.replace(att, $$DEV_PROPS[att]());\n      }\n      component.setAttribute(key, original);\n    } else {\n      component.setAttribute(key, a[key]);\n    }\n  }\n  for (const child of c) {\n    Array.isArray(child) && child.forEach((ct) => {\n      component.appendChild(ct);\n    });\n    $$isElement(child) && component.appendChild(child);\n  }\n  return component;\n};\nvar $$ct = (t) => document.createTextNode(t);\nvar $$cd = (t, s = true, $$subscribe = []) => {\n  const returnWrapping = (v) => {\n    if (Array.isArray(v)) {\n      return v;\n    }\n    return [v];\n  };\n  const $$output = t();\n  if (Array.isArray($$output)) {\n    return returnWrapping($$output);\n  }\n  const subscriber = document.createTextNode($$output);\n  s && $$subscribe.push([subscriber, t]);\n  return returnWrapping(subscriber);\n};\nfunction $$isElement(element) {\n  return element instanceof Element || element instanceof HTMLDocument || element instanceof Text;\n}\nwindow.$$$$ = {\n  $$cc,\n  $$ce,\n  $$ct,\n  $$cd,\n  $$isElement\n};\n"